services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Developer"
      SA_PASSWORD: "S@fePassw0rd!KG2025"
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "S@fePassw0rd!KG2025", "-C", "-Q", "SELECT 1"]
      interval: 10s
      retries: 10
    volumes:
      - ./:/work:ro
      - mssql_data:/var/opt/mssql

  api:
    build: ./api
    environment:
      DB_HOST: mssql
      DB_NAME: OpsGraph
      DB_USER: sa
      DB_PASS: "S@fePassw0rd!KG2025"
      DB_CONNECTION_STRING: "mssql://sa:S@fePassw0rd!KG2025@mssql:1433/OpsGraph?encrypt=true&trustServerCertificate=true"
      JWT_SECRET: "this_is_a_very_long_local_dev_secret_please_change"
      CORS_ORIGINS: "http://localhost:3000,http://localhost:3002,http://127.0.0.1:3000,http://127.0.0.1:3002,http://ui:3000,http://localhost:19006,exp://127.0.0.1:19000,exp://localhost:19000"
      # AI embeddings config: allow deterministic mock fallback when OPENAI_API_KEY is not set
      OPENAI_EMBED_ALLOW_FALLBACK: "true"
      # Limit per-IP WebSocket connections to reduce reconnect storms from the UI
      WS_MAX_CONN_PER_IP: "3"
    ports:
      - "3001:3000"
    volumes:
      - api_attachments:/tmp/attachments
    healthcheck:
      # Use Node to probe /health to avoid depending on wget/curl in the image
      test: ["CMD", "node", "-e", "(async()=>{try{const res=await fetch('http://localhost:3000/health');if(!res.ok) process.exit(1);}catch(e){process.exit(1)}})()"]
      interval: 10s
      timeout: 5s
      retries: 6
    depends_on:
      mssql:
        condition: service_healthy

  worker:
    build: ./worker
    environment:
      DB_DSN: "DRIVER={ODBC Driver 18 for SQL Server};SERVER=mssql;DATABASE=OpsGraph;UID=sa;PWD=S@fePassw0rd!KG2025;TrustServerCertificate=yes"
      WEBHOOK_URL: "http://api:3000/sse/outbox"
    depends_on:
      - mssql
      - api
    healthcheck:
      # Use Python's standard library to avoid relying on curl in the image
      test: ["CMD", "python", "-c", "import sys,urllib.request;sys.exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode()==200 else 1)"]
      interval: 30s
      timeout: 5s
      retries: 3

  alert-poller:
    build:
      context: ./worker
      dockerfile: Dockerfile.alert_poller
    environment:
      DB_DSN: "DRIVER={ODBC Driver 18 for SQL Server};SERVER=mssql;DATABASE=OpsGraph;UID=sa;PWD=S@fePassw0rd!KG2025;TrustServerCertificate=yes"
      MONITOR_POLL_INTERVAL: "60"
    depends_on:
      - mssql
    restart: unless-stopped

  ui:
    build:
      context: ./ui
      args:
        NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:3001/api"
        INTERNAL_API_BASE_URL: "http://api:3000/api"
    environment:
      # Use the internal docker network URL to reach the API service and include /api prefix
      NEXT_PUBLIC_API_BASE_URL: "http://127.0.0.1:3001/api"
      INTERNAL_API_BASE_URL: "http://api:3000/api"
    ports:
      - "3002:3000"
    healthcheck:
      # Use Node to probe the Next.js server without requiring wget/curl in the image
      test: ["CMD", "node", "-e", "(async()=>{try{const r=await fetch('http://localhost:3000');if(!r.ok)process.exit(1);}catch(e){process.exit(1)}})()"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      api:
        condition: service_healthy

  # Qdrant vector DB for semantic search (optional)
  qdrant:
    image: qdrant/qdrant:v1.9.1
    container_name: qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__API_KEY: ""
    profiles: ["qdrant"]

volumes:
  mssql_data:
  qdrant_data:
  api_attachments:
